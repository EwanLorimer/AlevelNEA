from scriptingFunctions import funcs
from flask import Flask, render_template, redirect, request, session, url_for, sessions, flash
#I had written a library called "dbFunctions" which contains all the functions to be used on the database
from dbFunctions import generalDbFunctions, usersTableFunctions, foldersTableFunctions, articlesTableFunctions
import sqlite3

app = Flask(__name__) #Instantiates Flask as "app"
app.secret_key = "EwanLorimer"


@app.route('/') #Loads main page
def homePage():
    return render_template('menuPage.html')


@app.route('/login', methods=["POST", "GET"])#Two methods: POST and GET, POST for secure data, GET for loading pages
def loginPage():
    
    if request.method == "POST":    #If request method is POST, user has entered details.
        #Take the data from the request form and store it as "username" and "password"
        username = request.form["username"]
        password = request.form["password"]
        if funcs.checkIfNothing(username, password) == False: #Checks that the user has entered data into both forms

            #Query database for user details
            usernameCheck = usersTableFunctions.returnUsername(username)
            passwordCheck = usersTableFunctions.returnPassword(username)
            

            if username == usernameCheck and password == passwordCheck:#If form data equal to data in database, take user to mainPage and create session
                session["sessionUsername"] = username
                
                return redirect(url_for("folderPage"))
            
            else:#If details do not match tell user details are incorrect, redirect user back to loginPage
                
                return redirect(url_for("loginPage"))

        else:#If the user has not entered data into the form, it will reload the login page and not log the user in.
            return render_template("loginPage.html")
            
    return render_template("loginPage.html")




    


@app.route('/signup', methods=["POST", "GET"])
def signUpPage():
    if request.method == "POST":#If request method is post it will mean user has submitted data
        #Take submitted data from form
        username = request.form["username"]
        password = request.form["password"]
        passwordConfirm = request.form["confirmPassword"]
        
        check = funcs.checkSignUpParameters(username, password, passwordConfirm)#Check sign up paramets
        if check == True:#If details meet all parameters, check if unique
            unique = usersTableFunctions.usernameAvailable(username)
            if unique == True:#If unique, create an account and take user to main page
                usersTableFunctions.createUser(username, password)
                session["sessionUsername"] = username
                
                return redirect(url_for("folderPage"))
            
        #If the details do not meet parameters or aren't unique
        #User is redirected back to signUpPage
            else:
                return redirect(url_for("signUpPage"))
        else:
            return redirect(url_for("signUpPage"))
    else:
        return render_template('signUpPage.html')


#This is where the folder will be
@app.route('/folders', methods=["POST", "GET"])
def folderPage():
    #If the username has been found in the session, this makes sure the user has actually logged in
    if "sessionUsername" in session:
        sessionUsername = session["sessionUsername"] #username in session is stored as sessionUsername
        returnedFolders = foldersTableFunctions.returnFolders(sessionUsername)#Query the database for all of the users folders
        folderList = []#List created to store the names of folders in.

        for n in range (len(returnedFolders)):#Iterate through returned folders and store it in new list, folderList then passed to webpage as content
            folder = funcs.itemFromList(returnedFolders,n)
            folderList.append(folder)
        
        
        #Create folder in database after user submits form
        if request.method == "POST":
                folderName = request.form["folderName"]
                if len(folderName) == 0:
                    return redirect(url_for("folderssPage"))
                if len(folderName) >= 0: #Length will be above zero if folder name has been entered into form
                    
                    foldersTableFunctions.createFolder(folderName,sessionUsername) #Create folder in database

                    return redirect(url_for("folderPage")) #Refresh folder page with new folder included

                #If a new folder name has not been submitted, the user must have selected a folder
                else:
                    #Take the value of the selected folder and go into it
                    folderSelected = request.form["folderSelected"]

                    session["sessionFolderSelected"] = folderSelected #Store the selected folder in the session
                    return redirect(url_for("articlesPage"))#Go to the articles page for that 
                                
    else:
        return redirect(url_for('homePage'))#If user is not found in session, user is not logged in, return to homepage
    return render_template('folderPage.html',content=folderList)#Pass folderList to the HTML page


#Page where article files will be located
@app.route('/articles', methods=['GET', 'POST'])
def articlesPage():
    if "sessionFolderSelected" in session:
        folder = session["sessionFolderSelected"] #Load folder name from session
        sessionUsername = session["sessionUsername"] #Load username from session
        folderID = foldersTableFunctions.returnFolderID(folder, sessionUsername) #Get folderID which will act as the foreign key for the articles
        
        returnedArticles = articlesTableFunctions.returnArticleTitles(folderID)#Retrieve any previously made articles from the database
        articleList = []
        
        for n in range (len(returnedArticles)):#Put the retrieved articles into a new list so they can be interpreted
            article = funcs.itemFromList(returnedArticles, n)
            articleList.append(article)

        #If form data has been submitted
        if request.method == "POST":
            newArticle = request.form["articleCreated"]
            if len(newArticle) == 0:
                return redirect(url_for("articlesPage"))

            if len(newArticle) > 0: #If length of newArticle is greater than 0, a new article has been created
                articlesTableFunctions.createArticle(newArticle,folderID)#Create article
                return redirect(url_for("articlesPage"))#Refresh articlesPage

            #Else, user has selected an article, take user to that article    
            else:
                articleName = request.form["articleSelected"] 
            
                session["sessionArticleName"] = articleName
                return redirect(url_for("notesPage"))
            

    return render_template('articlesPage.html',content=articleList)#Pass article list to webpage

@app.route('/notes', methods=['POST','GET'])
def notesPage():

    return render_template('notesPage.html')
#Runs the program
if __name__ == "__main__":
    
    app.run()