import time
from click import password_option
from scriptingFunctions import funcs
from flask import Flask, render_template, redirect, request, session, url_for, sessions, flash
from dbFunctions import generalDbFunctions, usersTableFunctions, foldersTableFunctions, articlesTableFunctions
import sqlite3


app = Flask(__name__) #Instantiates Flask as "app"



@app.route('/') #Loads main page
def homePage():
    return render_template('menuPage.html')


@app.route('/login', methods=["POST", "GET"])#Two methods: POST and GET, POST for secure data, GET for loading pages
def loginPage():
    
    if request.method == "POST":    #If request method is POST, user has entered details.
        username = request.form["username"] #Take the data from the request form and store it as "username" and "password"
        password = request.form["password"]
        
        usernameCheck = usersTableFunctions.returnUsername(username)#Query database for user details
        passwordCheck = usersTableFunctions.returnPassword(username)
        

        if username == usernameCheck and password == passwordCheck:#If form data equal to data in database, take user to mainPage
            return redirect(url_for("mainPage"))
        
        else:#If details do not match tell user details are incorrect, take to wrongDetailsPage
            
            return redirect(url_for("loginPage"))
    return render_template('loginPage.html')




    


@app.route('/signup', methods=["POST", "GET"])
def signUpPage():
    if request.method == "POST":
        username = request.form["username"]
        password = request.form["password"]
        passwordConfirm = request.form["confirmPassword"]
        
        check = funcs.checkSignUpParameters(username, password, passwordConfirm)#Check sign up paramets
        if check == True:#If details meet all parameters, check if unique
            unique = usersTableFunctions.usernameAvailable(username)
            if unique == True:#If unique, create an account and take user to main page
                usersTableFunctions.createUser(username, password)
                return redirect(url_for("mainPage"))
            else:
                print("User already exists")
                return redirect(url_for("signUpPage"))

        else:
            print("Username doesn't meet parameters")
            return redirect(url_for("signUpPage"))
    else:
        return render_template('signUpPage.html')



@app.route('/mainapp')
def mainPage():
    return render_template('mainPage.html')

if __name__ == "__main__":
    
    app.run()