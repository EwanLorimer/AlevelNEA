import sqlite3


class generalDbFunctions:

    def createUsersTable():
        con = sqlite3.connect('users.db') #Establishes connection to the Database
        cur = con.cursor() #Cursor tells database what to do

        #Creates user table with fields username and password
        cur.execute("""CREATE TABLE users (
            
            username text,
            password text
        )
        """)
        #Commit changes the DB
        con.commit()
        #Close connection to DB
        cur.close()


    def createFoldersTable():
        con = sqlite3.connect('users.db') #Establishes connection to the Database
        cur = con.cursor() #Cursor tells database what to do
        #Create Folder table with fields folderName and folderOwner
        cur.execute("""CREATE TABLE folders (
            
            folderName text,
            folderOwner text,
            folderID integer,
            FOREIGN KEY(folderOwner) REFERENCES users(username)
        )
            
        """)
        #Commit changes the DB
        con.commit()
        #Close connection to DB
        cur.close()


    #Create Articles Table    
    def createArticlesTable():
        con = sqlite3.connect('users.db') #Establishes connection to the Database
        cur = con.cursor() #Cursor tells database what to do

        cur.execute("""CREATE TABLE articles(
            articleID integer,
            articleTitle text,
            articleKeyWords text,
            articleNotes text,
            articleSummary text,
            articleFolderIn int,
            FOREIGN KEY(articleFolderIn) REFERENCES folders(folderID)
        )
        """)

        #Commit changes the DB
        con.commit()
        #Close connection to DB
        cur.close()


    def refreshTables():
        #Drops, recreates and outputs tables
        """
        DO NOT USE UNLESS NECESSARY
        """
        con = sqlite3.connect('users.db') #Establishes connection to the Database
        cur = con.cursor() #Cursor tells database what to do

        cur.execute("DROP TABLE users")
        cur.execute("DROP TABLE folders")
        cur.execute("DROP TABLE articles")
        generalDbFunctions.createArticlesTable()
        generalDbFunctions.createFoldersTable()
        generalDbFunctions.createUsersTable()
        generalDbFunctions.returnContentsofTable("users")
        generalDbFunctions.returnContentsofTable("folders")
        generalDbFunctions.returnContentsofTable("articles")    

        #Commit changes the DB
        con.commit()
        #Close connection to DB
        cur.close()

    def returnContentsofTable(table):
        #Returns the contents of the table
        #This will allow me to test each table, one universal function rather than
        #a function for each table -> less written code therefore easier to read

        con = sqlite3.connect('users.db') #Establishes connection to the Database
        cur = con.cursor() #Cursor tells database what to do

        cur.execute("SELECT * FROM {}".format(table))
        print(cur.fetchall())

        #Commit changes the DB
        con.commit()
        #Close connection to DB
        cur.close()
    
    def tupToString(tup):
        #Convert a tuple to a string so program can understand data retrieved from database
        
        returnedString = "".join([x[0] for x in tup])
        return returnedString
        

class usersTableFunctions:
            
    def usernameAvailable(Username):
        #Check if the username already exists, keeps usernames unique
        #Return any records in the user table with that username
        #If length not equal to zero then username taken return false
    
        con = sqlite3.connect('users.db') #Establishes connection to the Database
        cur = con.cursor() #Cursor tells database what to do

        lengthCheck = usersTableFunctions.returnUsername(Username)

        #Commit changes the DB
        con.commit()
        #Close connection to DB
        cur.close()
        if len(lengthCheck) != 0:
            return False
        elif len(lengthCheck) == 0:
            return True
        
        
    def returnUsername(Username):
        con = sqlite3.connect('users.db') #Establishes connection to the Database
        cur = con.cursor() #Cursor tells database what to do

        cur.execute("SELECT username FROM users WHERE username = '{}'".format(Username))
        uname = cur.fetchall()
        
        username = generalDbFunctions.tupToString(uname)
        
        #Commit changes the DB
        con.commit()
        #Close connection to DB
        cur.close()

        return username
    
       
    def returnPassword(username):
        con = sqlite3.connect('users.db') #Establishes connection to the Database
        cur = con.cursor() #Cursor tells database what to do

        cur.execute("SELECT password FROM users WHERE username='{}'".format(username))
        pword = cur.fetchall()
        pword = generalDbFunctions.tupToString(pword)

        #Commit changes the DB
        con.commit()
        #Close connection to DB
        cur.close()
        return pword
    
    def createUser(username, password):
        #username and password will be added into the database
        con = sqlite3.connect('users.db') #Establishes connection to the Database
        cur = con.cursor() #Cursor tells database what to do

        cur.execute("INSERT INTO users VALUES (?,?)",(username, password))
        #Commit changes the DB
        con.commit()
        #Close connection to DB
        cur.close()

"""
generalDbFunctions.refreshTables()       
usersTableFunctions.createUser("test","passwordlol")
generalDbFunctions.returnContentsofTable("users")
"""

usersTableFunctions.createUser("testUsername","testPassword")
print("Account details:")
print(generalDbFunctions.returnContentsofTable("users"))



class foldersTableFunctions:
    pass
class articlesTableFunctions:
    pass


